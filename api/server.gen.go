// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for SpanLength.
const (
	SpanLengthDay  SpanLength = "day"
	SpanLengthWeek SpanLength = "week"
)

// Defines values for GetScheduleParamsSpan.
const (
	GetScheduleParamsSpanDay  GetScheduleParamsSpan = "day"
	GetScheduleParamsSpanWeek GetScheduleParamsSpan = "week"
)

// Defines values for GetShiftsParamsSpan.
const (
	Day  GetShiftsParamsSpan = "day"
	Week GetShiftsParamsSpan = "week"
)

// Credentials defines model for Credentials.
type Credentials struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
}

// CredentialsRefresh defines model for CredentialsRefresh.
type CredentialsRefresh struct {
	RefreshToken string `json:"refresh_token"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Login defines model for Login.
type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Shift defines model for Shift.
type Shift struct {
	Capacity  int32              `json:"capacity"`
	Day       openapi_types.Date `json:"day"`
	EndTime   string             `json:"end_time"`
	Id        *ShiftId           `json:"id,omitempty"`
	StartTime string             `json:"start_time"`
}

// ShiftId defines model for ShiftId.
type ShiftId = int64

// Worker defines model for Worker.
type Worker struct {
	Email    string    `json:"email"`
	Id       *WorkerId `json:"id,omitempty"`
	IsAdmin  bool      `json:"is_admin"`
	Name     string    `json:"name"`
	Password *string   `json:"password,omitempty"`
}

// WorkerId defines model for WorkerId.
type WorkerId = int64

// ShiftIdParam defines model for ShiftIdParam.
type ShiftIdParam = ShiftId

// SpanDate defines model for SpanDate.
type SpanDate = openapi_types.Date

// SpanLength defines model for SpanLength.
type SpanLength string

// WorkerIdParam defines model for WorkerIdParam.
type WorkerIdParam = WorkerId

// GetScheduleParams defines parameters for GetSchedule.
type GetScheduleParams struct {
	// Date Date including in weekly schedule to fetch (defaults to today)
	Date *SpanDate `form:"date,omitempty" json:"date,omitempty"`

	// Span Span of schedule ("week" or "day", defaults to "week")
	Span *GetScheduleParamsSpan `form:"span,omitempty" json:"span,omitempty"`
}

// GetScheduleParamsSpan defines parameters for GetSchedule.
type GetScheduleParamsSpan string

// GetShiftsParams defines parameters for GetShifts.
type GetShiftsParams struct {
	// Date Date including in weekly schedule to fetch (defaults to today)
	Date *SpanDate `form:"date,omitempty" json:"date,omitempty"`

	// Span Span of schedule ("week" or "day", defaults to "week")
	Span *GetShiftsParamsSpan `form:"span,omitempty" json:"span,omitempty"`
}

// GetShiftsParamsSpan defines parameters for GetShifts.
type GetShiftsParamsSpan string

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = Login

// PostRefreshTokenJSONRequestBody defines body for PostRefreshToken for application/json ContentType.
type PostRefreshTokenJSONRequestBody = CredentialsRefresh

// CreateShiftJSONRequestBody defines body for CreateShift for application/json ContentType.
type CreateShiftJSONRequestBody = Shift

// UpdateShiftJSONRequestBody defines body for UpdateShift for application/json ContentType.
type UpdateShiftJSONRequestBody = Shift

// CreateWorkerJSONRequestBody defines body for CreateWorker for application/json ContentType.
type CreateWorkerJSONRequestBody = Worker

// UpdateWorkerJSONRequestBody defines body for UpdateWorker for application/json ContentType.
type UpdateWorkerJSONRequestBody = Worker

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/login)
	PostLogin(ctx echo.Context) error

	// (POST /auth/logout)
	PostLogout(ctx echo.Context) error

	// (POST /auth/refresh_token)
	PostRefreshToken(ctx echo.Context) error
	// Get information about current user
	// (GET /me)
	GetMe(ctx echo.Context) error
	// Get schedule information for current user
	// (GET /schedule)
	GetSchedule(ctx echo.Context, params GetScheduleParams) error
	// Get shifts for a span of time
	// (GET /shift)
	GetShifts(ctx echo.Context, params GetShiftsParams) error
	// Create new shift
	// (POST /shift)
	CreateShift(ctx echo.Context) error
	// Update an existing shift
	// (PUT /shift)
	UpdateShift(ctx echo.Context) error
	// Delete an existing shift
	// (DELETE /shift/{shift-id})
	DeleteShift(ctx echo.Context, shiftId ShiftIdParam) error
	// Get a single shift
	// (GET /shift/{shift-id})
	GetShift(ctx echo.Context, shiftId ShiftIdParam) error
	// Delete an existing shift assignment
	// (DELETE /shift/{shift-id}/assignment)
	DeleteShiftAssignment(ctx echo.Context, shiftId ShiftIdParam) error
	// Create new shift assignment
	// (POST /shift/{shift-id}/assignment)
	CreateShiftAssignment(ctx echo.Context, shiftId ShiftIdParam) error
	// Delete an existing worker
	// (DELETE /worker)
	DeleteWorker(ctx echo.Context) error
	// Get all workers
	// (GET /worker)
	GetWorkers(ctx echo.Context) error
	// Create new worker
	// (POST /worker)
	CreateWorker(ctx echo.Context) error
	// Update an existing worker
	// (PUT /worker)
	UpdateWorker(ctx echo.Context) error
	// Get a single worker
	// (GET /worker/{worker-id})
	GetWorker(ctx echo.Context, workerId WorkerIdParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// PostLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogout(ctx)
	return err
}

// PostRefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostRefreshToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRefreshToken(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// GetSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedule(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScheduleParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "span" -------------

	err = runtime.BindQueryParameter("form", true, false, "span", ctx.QueryParams(), &params.Span)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter span: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSchedule(ctx, params)
	return err
}

// GetShifts converts echo context to params.
func (w *ServerInterfaceWrapper) GetShifts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetShiftsParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "span" -------------

	err = runtime.BindQueryParameter("form", true, false, "span", ctx.QueryParams(), &params.Span)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter span: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShifts(ctx, params)
	return err
}

// CreateShift converts echo context to params.
func (w *ServerInterfaceWrapper) CreateShift(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"admin"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateShift(ctx)
	return err
}

// UpdateShift converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateShift(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"admin"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateShift(ctx)
	return err
}

// DeleteShift converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteShift(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shift-id" -------------
	var shiftId ShiftIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "shift-id", runtime.ParamLocationPath, ctx.Param("shift-id"), &shiftId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shift-id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"admin"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteShift(ctx, shiftId)
	return err
}

// GetShift converts echo context to params.
func (w *ServerInterfaceWrapper) GetShift(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shift-id" -------------
	var shiftId ShiftIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "shift-id", runtime.ParamLocationPath, ctx.Param("shift-id"), &shiftId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shift-id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShift(ctx, shiftId)
	return err
}

// DeleteShiftAssignment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteShiftAssignment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shift-id" -------------
	var shiftId ShiftIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "shift-id", runtime.ParamLocationPath, ctx.Param("shift-id"), &shiftId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shift-id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteShiftAssignment(ctx, shiftId)
	return err
}

// CreateShiftAssignment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateShiftAssignment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shift-id" -------------
	var shiftId ShiftIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "shift-id", runtime.ParamLocationPath, ctx.Param("shift-id"), &shiftId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shift-id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateShiftAssignment(ctx, shiftId)
	return err
}

// DeleteWorker converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorker(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"admin"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteWorker(ctx)
	return err
}

// GetWorkers converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"admin"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWorkers(ctx)
	return err
}

// CreateWorker converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorker(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"admin"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateWorker(ctx)
	return err
}

// UpdateWorker converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateWorker(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"admin"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateWorker(ctx)
	return err
}

// GetWorker converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorker(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "worker-id" -------------
	var workerId WorkerIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "worker-id", runtime.ParamLocationPath, ctx.Param("worker-id"), &workerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter worker-id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"admin"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWorker(ctx, workerId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/login", wrapper.PostLogin)
	router.POST(baseURL+"/auth/logout", wrapper.PostLogout)
	router.POST(baseURL+"/auth/refresh_token", wrapper.PostRefreshToken)
	router.GET(baseURL+"/me", wrapper.GetMe)
	router.GET(baseURL+"/schedule", wrapper.GetSchedule)
	router.GET(baseURL+"/shift", wrapper.GetShifts)
	router.POST(baseURL+"/shift", wrapper.CreateShift)
	router.PUT(baseURL+"/shift", wrapper.UpdateShift)
	router.DELETE(baseURL+"/shift/:shift-id", wrapper.DeleteShift)
	router.GET(baseURL+"/shift/:shift-id", wrapper.GetShift)
	router.DELETE(baseURL+"/shift/:shift-id/assignment", wrapper.DeleteShiftAssignment)
	router.POST(baseURL+"/shift/:shift-id/assignment", wrapper.CreateShiftAssignment)
	router.DELETE(baseURL+"/worker", wrapper.DeleteWorker)
	router.GET(baseURL+"/worker", wrapper.GetWorkers)
	router.POST(baseURL+"/worker", wrapper.CreateWorker)
	router.PUT(baseURL+"/worker", wrapper.UpdateWorker)
	router.GET(baseURL+"/worker/:worker-id", wrapper.GetWorker)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RZW2/bNhT+KwS3hw7QYq8J9uC3tFmHDB0QLB36kAQBIx7bbCRSJal4RqD/PhxSV5uy",
	"5djxBuTJEC+H3/nOlfQzjVWaKQnSGjp5phnTLAUL2n1dz8XUXvIrHMRvDibWIrNCSTrxs+TygkZU4HfG",
	"7JxGVLIU6IQanP1ZcBpRDd9zoYHTidU5RNTEc0gZCvxRw5RO6A+jBsXIz5pReTgtioheZ0xeMAvrIHCU",
	"CBknORdyRoQkC4DHZElQDM8TIFaRKdh4Tt5xmLI8sQaHrOJs+VMF/XsOetlg53hUG+dU6ZTZZsYuM6ej",
	"1ULOaoSfQc7sPEBUxiRR0wbSu1uKKG8pUZrcUs6WtzQibXjVgj6EJmOyg7DcTCduI40oyDylk5vqk7Ml",
	"vQsB/6r0I+heI/vpXisv3PQ+Zq7OpwWiKUdx00cNHKQVLPGeqVUG2gpwXyyOwZh7qx5B4veKXghmqsHM",
	"e1cUbbw3XXmruxve1MM3iC3Kb6H7yy9eB7kjhu2H/qa10uvnpGAMm8H2E6qFIdmf1UzIddmQMpEEGc6Y",
	"MQuleSc+6sFoCxQvtyUlhMmlgHVMMctYLOyyc7KQ9vR9c6yQFmagUQq6/vYYxojh91ak0FnsBgKLBR+c",
	"vyJqLNN2qOwVohB9R0ILaNRQ0UvfJV+l6dezIE0+EHfxgO0cNMEdUWHuGU9FOxAelEqASZz1+eTV3MyJ",
	"b2EI0VWDHcIXWhXiXAu7vEZlPVcfgGnQ57mvAg/u61Ml6o+vX6qU7ZR3s43oubWZT4JCTpXjQtgE6kJ7",
	"lTApscadX13SiD6BNj5Fj09+ORmjAioDyTJBJ/T0ZHwydtFl5w7YiOV2PkrqGFfGxRXamWGmR63plTLW",
	"pwFPIhj7QXEXPLGSFqTbw7IsEbHbNfpmlJM3LNV72UXXRlgr3IDJlDSexvfj8cEObZcRd/RKbc5d5p/m",
	"CfHsFBE9O+DxPmUHDr6UTywRnHhPw582gNPjAXCnkrhDU+PcdHKDscJmxpXJ3M5xlUdC73Bl7Voqt1t9",
	"C9esGfss0DJ1zIK7XgJqrQD3YyuL+Je6ATi8+wdahv9tLDjGiK5g/ncxEQByhNj4xEQCHBvx8mTiG0QP",
	"Z1df9JVtBgHX+x3sn0Bf0eRlVd9sbQ1WC3hiCd5ScgOacGaZVzNPU6aXHirByoSmEUoS9qByS+Jca5DW",
	"7aIND/5eUOpf3Xs2sXBdrYk6d9CbsHbNklF9NSyiQWvLS1pxtyfpwkJqBvWA6LVljWdas+XOxqj5WzdI",
	"faVsWwbjpscu5XpslUrbVC12r2FwgXnTZlmzivGcBMzhJpwBGDHltb9q8ysTuMPvsLUNVqOPGpgFD/F1",
	"ClGp/nFrT+vQXtePUXX04Irj1Uzb7bBvaNnMo9c0hvAEEgmLUkiQ+zxA/d8Zf6vU5071/Yj39BEmCfwj",
	"jMW7Sp8B6tQzeq4eCgvfBSbgn/m6lrlw45VldkxF7VfMQII563vaNDU9yZJ4ZPxFxHj0g4iJNifigyt/",
	"NC8LJ9FADmXECDlLYCffGTFjxEympRYD3Oi82XA0h2pAbvCtrV7TEtNX2QfUliPrX/vAWo5vq9MlYDWR",
	"D1AcfWNRP2RtdoOyNd7xOupklvgXVXN9kJSwqPCsNdH9ScHrYOgxuqbqKvHybtYrRBJhXlZgXHpIklKO",
	"CVO1yfNbJj98bW9ftY5X3Add8NpBt4fTtgJyk7Nu6K3eqgFa7ZUvbntYIdBm9VujSYij5/rPumLTha82",
	"0W5Fofs/4qt2Gru/aexPeqcz2UD3RtFOZrlntcS4x/GofO0kTPKVp6/6L9eVJya8X4f+sjWrf9IGVtZ3",
	"+/Z/9qF1TYlt1jZjxV3xbwAAAP//gsMmE0ggAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
